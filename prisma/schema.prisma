generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          String         @default("student")
    profile       Profile?
    accounts      Account[]
    sessions      Session[]
    conversations Conversation[]
}

model Profile {
    id                        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId                    String   @unique @db.ObjectId
    user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    undergraduate_degree      String?
    university                String?
    gpa                       Float?
    percentage                Float?
    backlogs                  Int?
    naac_grade                String?
    program_type              String?
    language_proficiency      Json? // {test_type: String, overall_score: Float}
    work_experience_years     Int?
    technical_skills          String[] @default([])
    preferred_study_countries String[] @default([])
    target_intake             String?
    budget_range              String?
    eligible_programs         String[] @default([]) @db.ObjectId // References to Program IDs
}

model Program {
    id                   String              @id @default(auto()) @map("_id") @db.ObjectId
    course_name          String
    degree_type          String
    tuition_fee          Float
    tuition_fee_currency String              @default("INR")
    duration             String
    university_name      String
    university_location  String
    program_url          String?
    english_requirments  EnglishRequirements
    min_gpa              Float?
    work_experience      Int?
    start_date           String
    apply_date           String
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    isActive             Boolean             @default(true)
}

type EnglishRequirements {
    ielts Float
    toefl Float
    pte   Float
}

type Message {
    role      String
    content   String
    metadata  Json?
    timestamp String
}

model Conversation {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    userId    String    @db.ObjectId
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    title     String?
    messages  Message[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    status    String    @default("active")

    @@index([userId, createdAt])
    @@index([status, updatedAt])
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
