generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          String         @default("student")
    profile       Profile?
    accounts      Account[]
    sessions      Session[]
    chatHistory   ChatMessage[]
    conversations Conversation[]
}

model Profile {
    id                        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId                    String   @unique @db.ObjectId
    user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    undergraduate_degree      String?
    university                String?
    gpa                       String?
    language_proficiency      Json?
    work_experience_years     String?
    technical_skills          String[] @default([])
    preferred_study_countries String[] @default([])
    target_intake             String?
    budget_range              String?
}

model Program {
    id                   String  @id @default(auto()) @map("_id") @db.ObjectId
    course_name          String
    degree_type          String
    tuition_fee          String
    duration             String
    university_name      String
    university_location  String
    global_rank          String?
    program_url          String?
    intake_date          String
    application_deadline String
    isActive            Boolean  @default(true) 

    // Eligibility
    english_requirements Json? // { ielts: string, toefl: string, pte: string }
    min_gpa              String?
    work_experience      String?

    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([course_name, university_name, intake_date])
    @@index([course_name, degree_type, university_name])
    @@index([intake_date, application_deadline])
}

model Conversation {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    userId    String        @db.ObjectId
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    title     String?
    messages  ChatMessage[]
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    status    String        @default("active")

    @@index([userId, createdAt])
    @@index([status, updatedAt])
}

model ChatMessage {
    id             String       @id @default(auto()) @map("_id") @db.ObjectId
    userId         String       @db.ObjectId
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    conversationId String       @db.ObjectId
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    content        String       @db.String
    role           String
    type           String       @default("text")
    metadata       Json?
    createdAt      DateTime     @default(now())
    isEdited       Boolean      @default(false)

    @@index([userId, createdAt])
    @@index([conversationId, createdAt])
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
