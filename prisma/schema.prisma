generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          String?   @default("student")
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
}

model Profile {
    id                     String   @id @default(auto()) @map("_id") @db.ObjectId
    userId                 String   @unique @db.ObjectId
    high_school_percentage String?
    subjects_studied       String[]
    language_proficiency   String?
    undergraduate_degree   String?
    gpa                    String?
    work_experience        String?
    technical_skills       String[]
    user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model University {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    university_name String
    location        String
    programs        Program[]
}

model Program {
    id                   String               @id @default(auto()) @map("_id") @db.ObjectId
    program_name         String
    degree_type          String
    duration             String
    tuition_fee          String
    program_start_date   String
    program_description  String
    universityId         String               @db.ObjectId
    university           University           @relation(fields: [universityId], references: [id], onDelete: Cascade)
    eligibility_criteria EligibilityCriteria?
}

model EligibilityCriteria {
    id                     String   @id @default(auto()) @map("_id") @db.ObjectId
    high_school_percentage String?
    subjects_required      String[]
    language_proficiency   String?
    undergraduate_degree   String?
    minimum_gpa            String?
    work_experience        String?
    technical_skills       String[]
    programId              String   @unique @db.ObjectId
    program                Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}
